{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","App.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","index.tsx"],"names":["TodoList","todos","onSlelectedTodoId","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","onSelectByCompletedChange","query","onQuery","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectByCompleted","Loader","TodoModal","onCloseModal","useState","user","setUser","loadUser","a","userId","loadedUser","useEffect","href","name","App","setTodos","isLoaded","setIsLoaded","ALL","selectByCompleted","setSelectByCompleted","setQuery","setSelectedTodoId","loadTodos","loadedTodos","visibleTodos","ACTIVE","filter","COMPLETED","normalizedQuery","split","word","trim","toLowerCase","join","includes","selectedTodo","find","option","newQuery","selectedId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6de1a677.chunk.js","sourcesContent":["import React from 'react';\n\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSlelectedTodoId: (selectedId:number) => void,\n  selectedTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSlelectedTodoId,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed\n            ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            )\n            : (\n              <td className=\"is-vcentered\" />\n            )}\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSlelectedTodoId(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  { 'fa-eye': selectedTodoId !== todo.id },\n                  { 'fa-eye-slash': selectedTodoId === todo.id },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  onSelectByCompletedChange: (option: string) => void,\n  query: string,\n  onQuery: (newQuery: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    onSelectByCompletedChange,\n    query,\n    onQuery,\n  },\n) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => {\n            onSelectByCompletedChange(event.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const enum SelectByCompleted {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectByCompleted, setSelectByCompleted] = useState<string>(SelectByCompleted.ALL);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const loadTodos = async () => {\n    const loadedTodos = await getTodos();\n\n    setTodos(loadedTodos);\n    setIsLoaded(true);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  let visibleTodos = [...todos];\n\n  switch (selectByCompleted) {\n    case SelectByCompleted.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n    case SelectByCompleted.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n    case SelectByCompleted.ALL:\n    default:\n      visibleTodos = [...todos];\n      break;\n  }\n\n  if (query) {\n    const normalizedQuery = query\n      .split(' ')\n      .map(word => word.trim().toLowerCase())\n      .join(' ');\n\n    visibleTodos = visibleTodos.filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId) || null;\n\n  const handleCloseModal = () => {\n    setSelectedTodoId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectByCompletedChange={(option) => setSelectByCompleted(option)}\n                query={query}\n                onQuery={(newQuery) => setQuery(newQuery)}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodoId}\n                    onSlelectedTodoId={(selectedId) => setSelectedTodoId(selectedId)}\n                  />\n                ) : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} onCloseModal={handleCloseModal} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | null,\n  onCloseModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = async () => {\n    const loadedUser = await getUser(todo?.userId || 0);\n\n    setUser(loadedUser);\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}